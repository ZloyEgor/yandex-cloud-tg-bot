import {ContextMessageUpdate, Middleware} from "telegraf";
import {wishlistRepository} from "../repository/wishlist";
import {parseArguments} from "../utils/arguments-parser";
import {replyError, wishlistWithItemsToString} from "../utils/common";
import {wishlistService} from "../service/wishlist-service";

export const createWishlist: Middleware<ContextMessageUpdate> = async (ctx) => {
  const [wishlistName] = parseArguments(ctx.message?.text);
  const userId = Number(ctx.message?.from?.id);

  try {
    if (wishlistName) {
      const isAlreadyExist = await wishlistRepository.checkIfWishlistExists(userId, wishlistName);
      if (!isAlreadyExist) {
        await wishlistRepository.createWishlist(userId, wishlistName);
        await ctx.reply(`–í–∏—à–ª–∏—Å—Ç "${wishlistName}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!`);
      } else {
        await ctx.reply("–í–∏—à–ª–∏—Å—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
      }
    } else {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏—à–ª–∏—Å—Ç–∞!");
    }
  } catch (e) {
    await ctx.replyWithMarkdown("```" + e + "```");
  }
};

export const listWishlists: Middleware<ContextMessageUpdate> = async (ctx) => {
  const userId = Number(ctx.message?.from?.id);
  const wishlists = await wishlistRepository.selectWishlistsByUserId(userId);
  const wishlistString = wishlists.reduce((acc, cur, index) => `${acc}\n${index + 1}. ${cur.name}`, "")
  await ctx.reply(`–í–æ—Ç –≤–∞—à–∏ –≤–∏—à–ª–∏—Å—Ç—ã:\n${wishlistString}`);
}

export const listUserWishlistsWithItems: Middleware<ContextMessageUpdate> = async (ctx) => {
  const userId = Number(ctx.message?.from?.id);
  const wishlists = await wishlistService.getWishlistsWithItemsByUserId(userId);

  const wishlistsString = wishlists.reduce((acc, cur) => `${acc}\n\n${wishlistWithItemsToString(cur)}`, '');
  await ctx.reply(`–í–æ—Ç –≤–∞—à–∏ –≤–∏—à–ª–∏—Å—Ç—ã:${wishlistsString}`)
}
export const addItemToWishlist: Middleware<ContextMessageUpdate> = async (ctx) => {
  const userId = Number(ctx.message?.from?.id);
  const [wishlistName, itemName, ...itemDescriptionWords] = parseArguments(ctx.message?.text);
  const itemDescription = itemDescriptionWords.join(" ");

  if (!wishlistName || !itemName) {
    return await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –∏–º—è –≤–∏—à–ª–∏—Å—Ç–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞!');
  }

  const wishlists = await wishlistRepository.selectWishlistsByUserId(userId);

  const targetWishlist = wishlists.find(v => v.name === wishlistName);

  if (!targetWishlist) {
    return await ctx.reply('–ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –≤–∏—à–ª–∏—Å—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
  }

  try {
    await wishlistRepository.addItemToWishlist({
      name: itemName,
      wishlistId: targetWishlist.id,
      description: itemDescription
    })
    await ctx.reply("–≠–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
  } catch (e) {
    await replyError(ctx);
  }
}

export const deleteItemFromWishlist: Middleware<ContextMessageUpdate> = async (ctx) => {
  const userId = Number(ctx.message?.from?.id);
  const [wishlistName, itemName] = parseArguments(ctx.message?.text);

  if (!wishlistName || !itemName) {
    return await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –∏–º—è –≤–∏—à–ª–∏—Å—Ç–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞!');
  }

  const wishlists = await wishlistRepository.selectWishlistsByUserId(userId);

  const targetWishlist = wishlists.find(v => v.name === wishlistName);

  if (!targetWishlist) {
    return await ctx.reply('–ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –≤–∏—à–ª–∏—Å—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
  }

  try {
    await wishlistRepository.deleteItemFromWishlist({
      name: itemName,
      wishlistId: targetWishlist.id,
    })
    await ctx.reply("–≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
  } catch (e) {
    await replyError(ctx);
  }
}

export const shareWishlist: Middleware<ContextMessageUpdate> = async (ctx) => {
  const userId = Number(ctx.message?.from?.id);
  const [wishlistName] = parseArguments(ctx.message?.text);

  if (!wishlistName)
    return await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏—à–ª–∏—Å—Ç–∞!");

  const targetWishlist = await wishlistService.getWishlist(userId, wishlistName);

  if (!targetWishlist)
    return await ctx.reply("–ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –≤–∏—à–ª–∏—Å—Ç–∞ –Ω–µ—Ç!");

  await ctx.reply('–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å —Ç–µ–º–∏, –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏—à–ª–∏—Å—Ç:');
  await ctx.replyWithMarkdown(`üéÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${ctx.message?.from?.username} —Ö–æ—á–µ—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤–∞–º–∏ —Å–≤–æ–∏–º –≤–∏—à–ª–∏—Å—Ç–æ–º! üéÅ\n\n` +
    `–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏—à–ª–∏—Å—Ç–∞ –∑–∞–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ @zloyegor\_wishlist\_bot –∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n` +
    `\`/explore ${targetWishlist.id}\`\n\n` +
    `–î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å–æ –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π \`/help\`\n`);
}

export const bookItem: Middleware<ContextMessageUpdate> = async (ctx) => {
  const userId = Number(ctx.message?.from?.id);
  const [wishlistId, itemName] = parseArguments(ctx.message?.text);

  if (!wishlistId || !itemName)
    return await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∏—à–ª–∏—Å—Ç–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞!");
};

export const exploreWishlist: Middleware<ContextMessageUpdate> = async (ctx) => {
  const userId = Number(ctx.message?.from?.id);
  const [wishlistId] = parseArguments(ctx.message?.text);

  if (!wishlistId)
    return await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∏—à–ª–∏—Å—Ç–∞!");

  try {
    const wishlist = await wishlistService.getWishlistById(wishlistId, userId);

    if (!wishlist)
      return await ctx.reply("–ü–æ—Ö–æ–∂–µ, –≤–∏—à–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä");

    return await ctx.replyWithMarkdown(`${wishlistWithItemsToString(wishlist, {showBookedMarks: true, isForMarkDown: true})}`);
  } catch (e) {
    // await replyError(ctx);
    await ctx.replyWithMarkdown("```" + e + "```");
  }
};

export const deleteWishlist: Middleware<ContextMessageUpdate> = async (ctx) => {
  const userId = Number(ctx.message?.from?.id);
  const [wishlistName] = parseArguments(ctx.message?.text);

  if (!wishlistName)
    return await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏—à–ª–∏—Å—Ç–∞!');

  const wishlistToDelete = await wishlistService.getWishlist(userId, wishlistName);

  if (!wishlistToDelete) {
    return await ctx.reply(`–í–∏—à–ª–∏—Å—Ç —Å –∏–º–µ–Ω–µ–º ${wishlistName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }

  try {
    await wishlistService.deleteWishlist(wishlistToDelete.id);
    await ctx.reply(`–í–∏—à–ª–∏—Å—Ç ${wishlistName} —É–¥–∞–ª–µ–Ω!`)
  } catch (e) {
    // await replyError(ctx);
    await ctx.replyWithMarkdown("```" + e + "```");
  }
}